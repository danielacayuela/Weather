{"ast":null,"code":"var _jsxFileName = \"/Users/danielacayuelatovar/Desktop/PORTAFOLIO/Weather/src/App.js\";\nimport React, { useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport './App.css';\nimport Nav from './components/Nav.jsx';\nimport Cards from './components/Cards.jsx';\nimport About from './components/About.jsx';\nimport Ciudad from './components/Ciudad.jsx';\nexport default function App() {\n  const [cities, setCities] = useState([]);\n  console.log('CITIES', cities);\n\n  function onSearch(ciudad) {\n    const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        let exists = cities.filter(city => city.id === recurso.id);\n        console.log('EXISTS', exists);\n\n        if (!exists.length > 0) {\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          swal({\n            title: 'City already selected',\n            icon: 'warning',\n            timer: 2000\n          });\n        }\n      } else {\n        swal({\n          title: 'City not found',\n          icon: 'error',\n          timer: 2000\n        });\n      }\n    });\n  }\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id != id));\n  }\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(Nav, {\n      onSearch: onSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 36\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/about\",\n    component: About,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(Cards, {\n      cities: cities,\n      onClose: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 42\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/ciudad/:ciudadId\",\n    render: ({\n      match\n    }) => /*#__PURE__*/React.createElement(Ciudad, {\n      city: onFilter(match.params.ciudadId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 64\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/danielacayuelatovar/Desktop/PORTAFOLIO/Weather/src/App.js"],"names":["React","useState","Route","swal","Nav","Cards","About","Ciudad","App","cities","setCities","console","log","onSearch","ciudad","apiKey","fetch","then","r","json","recurso","main","undefined","exists","filter","city","id","length","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","title","timer","onClose","c","onFilter","ciudadId","parseInt","match","params"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Route} from 'react-router-dom';\nimport swal from 'sweetalert';\nimport './App.css';\nimport Nav from './components/Nav.jsx';\nimport Cards from './components/Cards.jsx';\nimport About from './components/About.jsx';\nimport Ciudad from './components/Ciudad.jsx';\n\nexport default function App() {\n  const [cities,setCities] = useState([]);\n  console.log('CITIES',cities);\n  \n  function onSearch(ciudad) {\n    const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          let exists= cities.filter(city=> city.id ===  recurso.id); \n          console.log('EXISTS',exists);\n          if (!exists.length>0){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);  \n          }else{\n            swal({title:'City already selected', icon:'warning', timer:2000});\n          }\n        } else {\n          swal({title:'City not found', icon:'error', timer:2000});\n        }\n      });\n    }\n    function onClose(id) {\n      setCities(oldCities => oldCities.filter(c => c.id != id));\n    }\n    function onFilter (ciudadId) {\n      let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n      if (ciudad.length>0){\n        return ciudad[0];\n      }else{\n        return null;\n      }\n    }\n  return (\n    <div className=\"App\">\n      <Route path='/' render={()=> <Nav onSearch ={onSearch}/>}/>\n      <Route exact path='/about' component ={About} />\n      <Route exact path='/' render={()=> <Cards cities = {cities} onClose= {onClose}/>}/>\n      <Route exact path='/ciudad/:ciudadId' render={({match})=><Ciudad city={onFilter(match.params.ciudadId)} />} />\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}